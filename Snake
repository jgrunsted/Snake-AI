import tkinter as tk
from math import floor
from random import randint

from PIL import Image
from PIL import ImageTk

MOVE_INCREMENT = 20
MOVES_PER_SECOND = 15
GAME_SPEED = 1000 // MOVES_PER_SECOND


class Snake(tk.Canvas):
	def __init__(self):
		super().__init__(width=810, height=830, background="black", highlightthickness=0)

		self.snake_pos = [(100, 100), (80, 100), (60, 100)]
		self.food_pos = self.set_new_food_pos()
		self.score = 0
		self.direction = "Right"
		self.bind_all("<Key>", self.on_key_press)

		self.loadassets()
		self.createobjects()

		self.vision = []

		self.after(GAME_SPEED, self.perform_actions)

	def loadassets(self):
		try:
			self.snake_body_image = Image.open("./assets/snake.png")
			self.snake_body = ImageTk.PhotoImage(self.snake_body_image)

			self.food_image = Image.open("./assets/food.png")
			self.food = ImageTk.PhotoImage(self.food_image)
		except IOError as error:
			print(error)
			root.destroy()

	def createobjects(self):
		self.create_text(37, 12, text=f"Score: {self.score}", tag="score", fill="#fff", font=("Helvetica", 14))

		for x_pos, y_pos in self.snake_pos:
			self.create_image(x_pos, y_pos, image=self.snake_body, tag="snake")

		self.create_image(*self.food_pos, image=self.food, tag="food")
		self.create_rectangle(7, 27, 800, 820, outline="#fff")

	def move_snake(self):
		head_x_pos, head_y_pos = self.snake_pos[0]

		if self.direction == "Left":
			new_head_pos = (head_x_pos - MOVE_INCREMENT, head_y_pos)
		elif self.direction == "Right":
			new_head_pos = (head_x_pos + MOVE_INCREMENT, head_y_pos)
		elif self.direction == "Up":
			new_head_pos = (head_x_pos, head_y_pos - MOVE_INCREMENT)
		elif self.direction == "Down":
			new_head_pos = (head_x_pos, head_y_pos + MOVE_INCREMENT)


		self.snake_pos = [new_head_pos] + self.snake_pos[:-1]

		for segment, pos in zip(self.find_withtag("snake"), self.snake_pos):
			self.coords(segment, pos)

	def perform_actions(self):
		if self.check_collisions():
			self.end_game()
			return

		self.check_food_collision()
		self.move_snake()

		self.after(GAME_SPEED, self.perform_actions)

	def check_collisions(self):
		head_x_pos, head_y_pos = self.snake_pos[0]

		return (
				head_x_pos in (0, 800) or head_y_pos in (20, 820) or (head_x_pos, head_y_pos) in self.snake_pos[1:]
		)

	def on_key_press(self, e):
		new_direction = e.keysym
		all_directions = ("Up", "Down", "Left", "Right")
		opposites = ({"Up", "Down"}, {"Left", "Right"})

		if new_direction in all_directions and {new_direction, self.direction} not in opposites:
			self.direction = new_direction

	def check_food_collision(self):
		if self.snake_pos[0] == self.food_pos:
			self.score += 1
			self.snake_pos.append(self.snake_pos[-1])

			self.create_image(*self.snake_pos[-1], image=self.snake_body, tag="snake")

			self.food_pos = self.set_new_food_pos()
			self.coords(self.find_withtag("food"), self.food_pos)

			score = self.find_withtag("score")
			self.itemconfigure(score, text=f"Score: {self.score}", tag="score")

	def set_new_food_pos(self):
		while True:
			x_pos = randint(1,39) * MOVE_INCREMENT
			y_pos = randint(3,40) * MOVE_INCREMENT
			food_position = (x_pos, y_pos)

			if food_position not in self.snake_pos:
				return food_position

	def end_game(self):
		self.delete(tk.ALL)
		self.create_text(self.winfo_width()/2, self.winfo_height()/2, text=f"Game Over! You scored {self.score}", fill="#fff", font=("Helvetica", 30))

	def get_left_vision(self):
		head_x_pos, head_y_pos = self.snake_pos[0]
		if head_y_pos == self.food_pos[1]:
			if head_x_pos > self.food_pos[0]:
				return ["food", head_x_pos - self.food_pos[0]]

		return ["wall", head_x_pos]

root = tk.Tk()
root.title("snake")
root.resizable(False, False)

board = Snake()
board.pack()

root.mainloop()
